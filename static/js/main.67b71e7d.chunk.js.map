{"version":3,"sources":["Calculator/NumberButton.js","Calculator/OperatorButton.js","Calculator/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["NumberButton","name","areaName","onClickNumber","style","default","gridArea","backgroundColor","color","border","fontSize","borderRadius","zero","textAlign","paddingLeft","theStyle","className","onClick","OperatorButton","onClickOperation","numberList","lightgreyList","orangeList","Calculator","useState","value","setValue","operation","setOperation","result","setResult","display","setDisplay","percentage","setPercentage","lastButtonPressed","setLastButtonPressed","num","length","concat","console","log","calculate","valueOrPercent","numValue","parseFloat","button","toPositiveValue","substring","togglePositiveNegative","percent","calcPercentage","useEffect","toFixed","map","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAGe,SAASA,EAAT,GAA0D,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,cAC/CC,EAAQ,CACZC,QAAS,CACPC,SAAUJ,EACVK,gBAAiB,UACjBC,MAAO,UACPC,OAAQ,oBACRC,SAAU,OACVC,aAAc,OAEhBC,KAAM,CACJD,aAAc,OACdE,UAAW,OACXC,YAAa,SAIbC,EAAWX,EAAMC,QAGrB,MAFiB,SAAbH,IAAqBa,EAAQ,2BAAQX,EAAMC,SAAYD,EAAMQ,OAG/D,wBACER,MAAOW,EACPC,UAAU,YACVC,QAAS,kBAAMd,EAAcF,IAH/B,SAKGA,IC3BQ,SAASiB,EAAT,GAA4D,IAAlCjB,EAAiC,EAAjCA,KAAMO,EAA2B,EAA3BA,MAAOW,EAAoB,EAApBA,iBAiBhDJ,EARS,CACTR,gBAAiB,UACjBE,OAAQ,oBACRC,SAAU,OACVC,aAAc,OAOlB,MAFc,WAAVH,IAAoBO,EAhBd,CACNR,gBAAiB,UACjBC,MAAO,UACPC,OAAQ,oBACRC,SAAU,OACVC,aAAc,QAchB,wBACEP,MAAOW,EACPC,UAAU,iBACVC,QAAS,kBAAME,EAAiBlB,IAHlC,SAKGA,I,UCvBDmB,EAAa,CACjB,CAAC,OAAQ,KACT,CAAC,MAAO,KACR,CAAC,MAAO,KACR,CAAC,QAAS,KACV,CAAC,OAAQ,KACT,CAAC,OAAQ,KACT,CAAC,MAAO,KACR,CAAC,QAAS,KACV,CAAC,QAAS,KACV,CAAC,OAAQ,KACT,CAAC,MAAO,MAEJC,EAAgB,CAAC,IAAK,MAAO,KAC7BC,EAAa,CAAC,IAAK,IAAK,IAAK,IAAK,KA+NzBC,EAzKI,WAAO,IAAD,EACGC,mBAAS,IADZ,mBAChBC,EADgB,KACTC,EADS,OAEWF,mBAAS,IAFpB,mBAEhBG,EAFgB,KAELC,EAFK,OAIKJ,mBAAS,GAJd,mBAIhBK,EAJgB,KAIRC,EAJQ,OAKON,mBAASC,GALhB,mBAKhBM,EALgB,KAKPC,EALO,OAMaR,mBAAS,GANtB,mBAMhBS,EANgB,KAMJC,EANI,OAO2BV,mBAAS,UAPpC,mBAOhBW,EAPgB,KAOGC,EAPH,KASjBjC,EAAgB,SAACkC,GACT,MAARA,GAA2C,MAA5BZ,EAAMA,EAAMa,OAAS,KAE5B,MAARD,GAAyB,KAAVZ,EACjBC,EAAS,IAAIa,OAAOF,KAGpBG,QAAQC,IAAI,SAAU,IAAIF,OAAO,MACjCb,EAASD,EAAMc,OAAOF,KAExBL,EAAWP,EAAMc,OAAOF,IACxBD,EAAqB,YAGjBM,EAAY,SAACC,GACjB,IAAMC,EAAWC,WAAWF,GAC5B,GAAe,IAAXd,EAKJ,OAAQF,GACN,IAAK,IACHG,EAAUD,EAASe,GACnB,MACF,IAAK,IACHd,EAAUD,EAASe,GACnB,MACF,IAAK,IACHd,EAAUD,EAASe,GACnB,MACF,IAAK,IACHd,EAAUD,EAASe,GACnB,MACF,IAAK,IACH,MACF,IAAK,IACHd,EAAUD,GACV,MACF,QAEEC,EAAUc,QAxBZd,EAAUc,IA4DRzB,EAAmB,SAAC2B,GACT,MAAXA,GACFlB,EAAa,IACbE,EAAU,GACVE,EAAW,IACS,QAAXc,EA3BkB,WAC7B,GAA0B,WAAtBX,EAEF,GADAK,QAAQC,IAAI,WAAYhB,GACV,KAAVA,EACFC,EAAS,KACTM,EAAW,WACN,GAAc,MAAVP,EACTC,EAAS,IACTM,EAAW,UACN,GAAiB,MAAbP,EAAM,GAAY,CAC3B,IAAMsB,EAAkBtB,EAAMuB,UAAU,EAAGvB,EAAMa,QACjDZ,EAASqB,GACTf,EAAWe,QAEXrB,EAAS,IAAIa,OAAOd,IACpBO,EAAW,IAAIO,OAAOd,SAGxBK,GAAoB,EAAVD,GAUVoB,GACoB,MAAXH,GACK,KAAVrB,GAxCe,WACrB,IAAMyB,EAAUL,WAAWpB,GAAS,IACrB,IAAXI,EACFK,EAAcgB,IAEdR,EAAUb,EAASqB,GACnBhB,EAAcL,EAASqB,IAkCLC,GAClBvB,EAAakB,KAGC,KAAVrB,GAAciB,EAAUjB,GAC5BG,EAAakB,GACE,MAAXA,GAAgBd,EAAWH,IAElB,QAAXiB,IAAkBpB,EAAS,IAG/BU,EAAgC,MAAXU,EAAiB,SAAW,cA2BnD,OAxBAM,qBAAU,WAENpB,EADEH,EAAS,IAAM,EACNA,EAEAA,EAAOwB,QAAQ,MAE3B,CAACxB,IAEJuB,qBAAU,WAENpB,EADEC,EAAa,IAAM,EACVA,EAEAA,EAAWoB,QAAQ,MAE/B,CAACpB,IAEJO,QAAQC,IAAI,QAAShB,GACrBe,QAAQC,IAAI,SAAUZ,GACtBW,QAAQC,IAAI,YAAad,GACzBa,QAAQC,IAAI,UAAWV,GACvBS,QAAQC,IAAI,gBACZD,QAAQC,IAAI,WAAYhB,GACxBe,QAAQC,IAAI,oBAAqBI,WAAW,QAG1C,sBAAK7B,UAAU,YAAf,UACE,mBAAGA,UAAU,SAAb,SAAuBe,GAAW,MAClC,qBAAKf,UAAU,YAAf,SACGK,EAAciC,KAAI,SAACrD,EAAMsD,GAAP,OACjB,cAACrC,EAAD,CACEjB,KAAMA,EAENO,MAAM,YACNW,iBAAkBA,GAFboC,QAMX,qBAAKvC,UAAU,SAAf,SACGM,EAAWgC,KAAI,SAACrD,EAAMsD,GAAP,OACd,cAACrC,EAAD,CACEjB,KAAMA,EAENO,MAAM,SACNW,iBAAkBA,GAFboC,QAMX,qBAAKvC,UAAU,WAAf,SACGI,EAAWkC,KAAI,SAACjB,EAAKkB,GAAN,OACd,cAAC,EAAD,CACEtD,KAAMoC,EAAI,GACVnC,SAAUmC,EAAI,GAEdlC,cAAeA,GADVoD,YClOFC,MAJf,WACE,OAAO,cAAC,EAAD,KCQMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.67b71e7d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./NumberButton.css\";\n\nexport default function NumberButton({ name, areaName, onClickNumber }) {\n  const style = {\n    default: {\n      gridArea: areaName,\n      backgroundColor: \"#3b3b3b\",\n      color: \"#ffffff\",\n      border: \"1px solid #3b3b3b\",\n      fontSize: \"40px\",\n      borderRadius: \"50%\",\n    },\n    zero: {\n      borderRadius: \"80px\",\n      textAlign: \"left\",\n      paddingLeft: \"52px\",\n    },\n  };\n\n  let theStyle = style.default;\n  if (areaName === \"zero\") theStyle = { ...style.default, ...style.zero };\n\n  return (\n    <button\n      style={theStyle}\n      className=\"numButton\"\n      onClick={() => onClickNumber(name)}\n    >\n      {name}\n    </button>\n  );\n}\n","import React from \"react\";\n\nexport default function OperatorButton({ name, color, onClickOperation }) {\n  const style = {\n    orange: {\n      backgroundColor: \"#ff9d00\",\n      color: \"#ffffff\",\n      border: \"1px solid #ff9d00\",\n      fontSize: \"40px\",\n      borderRadius: \"50%\",\n    },\n    lightgrey: {\n      backgroundColor: \"#cccccc\",\n      border: \"1px solid #cccccc\",\n      fontSize: \"40px\",\n      borderRadius: \"50%\",\n    },\n  };\n\n  let theStyle = style.lightgrey;\n  if (color === \"orange\") theStyle = style.orange;\n\n  return (\n    <button\n      style={theStyle}\n      className=\"operatorButton\"\n      onClick={() => onClickOperation(name)}\n    >\n      {name}\n    </button>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport NumberButton from \"./NumberButton\";\nimport OperatorButton from \"./OperatorButton\";\nimport \"./Calculator.css\";\n\nconst numberList = [\n  [\"zero\", \"0\"],\n  [\"one\", \"1\"],\n  [\"two\", \"2\"],\n  [\"three\", \"3\"],\n  [\"four\", \"4\"],\n  [\"five\", \"5\"],\n  [\"six\", \"6\"],\n  [\"seven\", \"7\"],\n  [\"eight\", \"8\"],\n  [\"nine\", \"9\"],\n  [\"dot\", \".\"],\n];\nconst lightgreyList = [\"C\", \"+/-\", \"%\"];\nconst orangeList = [\"/\", \"x\", \"-\", \"+\", \"=\"];\n\n// components\n// main div is a grid container\n// Result <p></p>\n// 3 div for buttons (lightgrey, orange, darkgrey) => grid wrapper\n// Reusable number button component (darkgrey)\n// Reusable operation button component (lightgrey and orange)\n\n// main div grid container =>\n// display: grid\n// grid-template-rows: 2fr repeat(5, 1fr)\n// grid-template-columns: repeat(4, 1fr)\n\n// Result grid item\n// grid-area: result\n\n// Div lightgrey => grid-area: lightgrey\n// display: inline-grid\n// grid-template-rows: 1fr;\n// grid-template-columns: repeat(3, 1fr)\n\n// Div orange => grid-area: orange\n// display: inline-grid\n// grid-template-rows: repeat(5, 1fr);\n// grid-template-columns: 1fr;\n\n// Div darkgrey => grid-area: darkgrey\n// display: inline-grid\n// grid-template-rows: repeat(4, 1fr);\n// grid-template-columns: repeat(3, 1fr);\n\n// Reusable number button\n// grid item\n// grid-area: props.name\n\n// Reusable operation button\n// grid item\n// grid-area: props.name\n// backgroundColor:\n// if(props.color === 'orange')\n//   { style = {bgColor: orange, color: white}   }\n// else if(props.color === 'lightgrey')\n//  {  style = {bgColor: lightgrey, color: black}    }\n\n// create useState currentValue, currentOperation, currentResult\n// create function onClickNumber => concat this num to the currentValue\n\n// create function onClickOperation(\"+\")\n// => + set currentResult = currentResult +-*/ currentValue, reset currentValue to \"\"\n// => set currentOperation to \"+\"\n// create function onClickOperation(\"=\")\n// => set currentValue = currentResult +-*/ currentValue, reset currentResult to 0\n\nconst Calculator = () => {\n  const [value, setValue] = useState(\"\");\n  const [operation, setOperation] = useState(\"\");\n  // const operation = [];\n  const [result, setResult] = useState(0);\n  const [display, setDisplay] = useState(value);\n  const [percentage, setPercentage] = useState(0);\n  const [lastButtonPressed, setLastButtonPressed] = useState(\"number\");\n\n  const onClickNumber = (num) => {\n    if (num === \".\" && value[value.length - 1] === \".\") return;\n\n    if (num === \".\" && value === \"\") {\n      setValue(\"0\".concat(num));\n    } else {\n      // 2\n      console.log(\"concat\", \"-\".concat(\"2\"));\n      setValue(value.concat(num)); // \"-\" + \"2\" = \"-2\"\n    }\n    setDisplay(value.concat(num));\n    setLastButtonPressed(\"number\");\n  };\n\n  const calculate = (valueOrPercent) => {\n    const numValue = parseFloat(valueOrPercent);\n    if (result === 0) {\n      setResult(numValue);\n      return;\n    }\n\n    switch (operation) {\n      case \"-\":\n        setResult(result - numValue);\n        break;\n      case \"+\":\n        setResult(result + numValue);\n        break;\n      case \"x\":\n        setResult(result * numValue);\n        break;\n      case \"/\":\n        setResult(result / numValue);\n        break;\n      case \"=\":\n        break;\n      case \"%\":\n        setResult(result);\n        break;\n      default:\n        // case \"%\"\n        setResult(numValue);\n    }\n  };\n\n  const calcPercentage = () => {\n    const percent = parseFloat(value) / 100;\n    if (result === 0) {\n      setPercentage(percent);\n    } else {\n      calculate(result * percent);\n      setPercentage(result * percent);\n    }\n  };\n\n  const togglePositiveNegative = () => {\n    if (lastButtonPressed === \"number\") {\n      console.log(\"value...\", value);\n      if (value === \"\") {\n        setValue(\"-\");\n        setDisplay(\"-0\");\n      } else if (value === \"-\") {\n        setValue(\"\");\n        setDisplay(\"0\");\n      } else if (value[0] === \"-\") {\n        const toPositiveValue = value.substring(1, value.length);\n        setValue(toPositiveValue);\n        setDisplay(toPositiveValue);\n      } else {\n        setValue(\"-\".concat(value));\n        setDisplay(\"-\".concat(value));\n      }\n    } else {\n      setResult(result * -1);\n    }\n  };\n\n  const onClickOperation = (button) => {\n    if (button === \"C\") {\n      setOperation(\"\");\n      setResult(0);\n      setDisplay(0);\n    } else if (button === \"+/-\") {\n      togglePositiveNegative();\n    } else if (button === \"%\") {\n      if (value !== \"\") calcPercentage();\n      setOperation(button);\n    } else {\n      // if button === + - x / =\n      if (value !== \"\") calculate(value);\n      setOperation(button);\n      if (button === \"=\") setDisplay(result);\n    }\n    if (button !== \"+/-\") setValue(\"\");\n    else return;\n\n    setLastButtonPressed(button === \"C\" ? \"number\" : \"operator\");\n  };\n\n  useEffect(() => {\n    if (result % 1 === 0) {\n      setDisplay(result);\n    } else {\n      setDisplay(result.toFixed(4));\n    }\n  }, [result]);\n\n  useEffect(() => {\n    if (percentage % 1 === 0) {\n      setDisplay(percentage);\n    } else {\n      setDisplay(percentage.toFixed(4));\n    }\n  }, [percentage]);\n\n  console.log(\"value\", value);\n  console.log(\"result\", result);\n  console.log(\"operation\", operation);\n  console.log(\"display\", display);\n  console.log(\"------------\");\n  console.log(\"value...\", value);\n  console.log(\"parseFloat('-20')\", parseFloat(\"-20\"));\n\n  return (\n    <div className=\"container\">\n      <p className=\"result\">{display || \"0\"}</p>\n      <div className=\"lightgrey\">\n        {lightgreyList.map((name, index) => (\n          <OperatorButton\n            name={name}\n            key={index}\n            color=\"lightgrey\"\n            onClickOperation={onClickOperation}\n          />\n        ))}\n      </div>\n      <div className=\"orange\">\n        {orangeList.map((name, index) => (\n          <OperatorButton\n            name={name}\n            key={index}\n            color=\"orange\"\n            onClickOperation={onClickOperation}\n          />\n        ))}\n      </div>\n      <div className=\"darkgrey\">\n        {numberList.map((num, index) => (\n          <NumberButton\n            name={num[1]}\n            areaName={num[0]}\n            key={index}\n            onClickNumber={onClickNumber}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Calculator;\n","import \"./App.css\";\nimport Calculator from \"./Calculator/Calculator\";\n\nfunction App() {\n  return <Calculator />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}